{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uBBF8\\uB9BC\\\\Desktop\\\\test1\\\\sample\\\\src\\\\components\\\\card\\\\ImageUploadCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport '../styles/ImageUploadCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUploadCard = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [ocrResult, setOcrResult] = useState(\"\");\n  const [isTransportVerified, setIsTransportVerified] = useState(false); // \"대중교통\" 여부 확인 상태\n\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append('image', file);\n    try {\n      const response = await axios.post('http://localhost:8080/api/ocr', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const ocrText = response.data; // 서버로부터 OCR 결과 받기\n      setOcrResult(ocrText);\n\n      // \"대중교통\"이라는 단어가 OCR 결과에 포함되어 있는지 확인\n      if (ocrText.includes(\"대중교통\" && \"지하철\")) {\n        setIsTransportVerified(true);\n        console.log('대중교통을 사용했습니다.');\n      } else {\n        setIsTransportVerified(false);\n        console.log('대중교통을 사용하지 않았습니다.');\n      }\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"image-upload-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload Image for OCR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ocr-result-container\",\n      children: [ocrResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ocr-result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"OCR Result:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: ocrResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), isTransportVerified && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verification-success\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\\"\\uB300\\uC911\\uAD50\\uD1B5\\\"\\uC774 \\uD3EC\\uD568\\uB418\\uC5B4 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uD1B5\\uACFC\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), !isTransportVerified && ocrResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verification-failure\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\\"\\uB300\\uC911\\uAD50\\uD1B5\\\"\\uC774 \\uD3EC\\uD568\\uB418\\uC5B4 \\uC788\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageUploadCard, \"etqDLktFcN0EwKj1hNtepEKvREc=\");\n_c = ImageUploadCard;\nexport default ImageUploadCard;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import '../styles/ImageUploadCard.css';\n\n// const ImageUploadCard = () => {\n//     const [file, setFile] = useState(null);\n//     const [ocrResult, setOcrResult] = useState(\"\");\n\n//     const handleFileChange = (event) => {\n//         setFile(event.target.files[0]);\n//     };\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n\n//         const formData = new FormData();\n//         formData.append('image', file);\n\n//         try {\n//             const response = await axios.post('http://localhost:8080/api/ocr', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data'\n//                 }\n//             });\n\n//             setOcrResult(response.data); // OCR 결과 저장\n//         } catch (error) {\n//             console.error('Error uploading file:', error);\n//         }\n//     };\n\n//     return (\n//         <div className=\"image-upload-container\">\n//             <form onSubmit={handleSubmit} className=\"image-upload-card\">\n//                 <h2>Upload Image for OCR</h2>\n//                 <input type=\"file\" onChange={handleFileChange} required />\n//                 <button type=\"submit\">Upload</button>\n//             </form>\n//             <div className=\"ocr-result-container\">\n//                 {ocrResult && (\n//                     <div className=\"ocr-result\">\n//                         <h3>OCR Result:</h3>\n//                         <p>{ocrResult}</p>\n//                     </div>\n//                 )}\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default ImageUploadCard;\nvar _c;\n$RefreshReg$(_c, \"ImageUploadCard\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ImageUploadCard","_s","file","setFile","ocrResult","setOcrResult","isTransportVerified","setIsTransportVerified","handleFileChange","event","target","files","handleSubmit","preventDefault","formData","FormData","append","response","post","headers","ocrText","data","includes","console","log","error","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","required","_c","$RefreshReg$"],"sources":["C:/Users/이미림/Desktop/test1/sample/src/components/card/ImageUploadCard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/ImageUploadCard.css';\r\n\r\nconst ImageUploadCard = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [ocrResult, setOcrResult] = useState(\"\");\r\n    const [isTransportVerified, setIsTransportVerified] = useState(false); // \"대중교통\" 여부 확인 상태\r\n\r\n    const handleFileChange = (event) => {\r\n        setFile(event.target.files[0]);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = new FormData();\r\n        formData.append('image', file);\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:8080/api/ocr', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n\r\n            const ocrText = response.data; // 서버로부터 OCR 결과 받기\r\n            setOcrResult(ocrText);\r\n\r\n            // \"대중교통\"이라는 단어가 OCR 결과에 포함되어 있는지 확인\r\n            if (ocrText.includes(\"대중교통\"&&\"지하철\")) {\r\n                setIsTransportVerified(true);\r\n                console.log('대중교통을 사용했습니다.');\r\n            } else {\r\n                setIsTransportVerified(false);\r\n                console.log('대중교통을 사용하지 않았습니다.');\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Error uploading file:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"image-upload-container\">\r\n            <form onSubmit={handleSubmit} className=\"image-upload-card\">\r\n                <h2>Upload Image for OCR</h2>\r\n                <input type=\"file\" onChange={handleFileChange} required />\r\n                <button type=\"submit\">Upload</button>\r\n            </form>\r\n            <div className=\"ocr-result-container\">\r\n                {ocrResult && (\r\n                    <div className=\"ocr-result\">\r\n                        <h3>OCR Result:</h3>\r\n                        <p>{ocrResult}</p>\r\n                    </div>\r\n                )}\r\n                {isTransportVerified && (\r\n                    <div className=\"verification-success\">\r\n                        <p>\"대중교통\"이 포함되어 있습니다. 통과되었습니다!</p>\r\n                    </div>\r\n                )}\r\n                {!isTransportVerified && ocrResult && (\r\n                    <div className=\"verification-failure\">\r\n                        <p>\"대중교통\"이 포함되어 있지 않습니다.</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUploadCard;\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import '../styles/ImageUploadCard.css';\r\n\r\n// const ImageUploadCard = () => {\r\n//     const [file, setFile] = useState(null);\r\n//     const [ocrResult, setOcrResult] = useState(\"\");\r\n\r\n//     const handleFileChange = (event) => {\r\n//         setFile(event.target.files[0]);\r\n//     };\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n\r\n//         const formData = new FormData();\r\n//         formData.append('image', file);\r\n\r\n//         try {\r\n//             const response = await axios.post('http://localhost:8080/api/ocr', formData, {\r\n//                 headers: {\r\n//                     'Content-Type': 'multipart/form-data'\r\n//                 }\r\n//             });\r\n\r\n//             setOcrResult(response.data); // OCR 결과 저장\r\n//         } catch (error) {\r\n//             console.error('Error uploading file:', error);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"image-upload-container\">\r\n//             <form onSubmit={handleSubmit} className=\"image-upload-card\">\r\n//                 <h2>Upload Image for OCR</h2>\r\n//                 <input type=\"file\" onChange={handleFileChange} required />\r\n//                 <button type=\"submit\">Upload</button>\r\n//             </form>\r\n//             <div className=\"ocr-result-container\">\r\n//                 {ocrResult && (\r\n//                     <div className=\"ocr-result\">\r\n//                         <h3>OCR Result:</h3>\r\n//                         <p>{ocrResult}</p>\r\n//                     </div>\r\n//                 )}\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ImageUploadCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}