{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uBBF8\\uB9BC\\\\Desktop\\\\test1\\\\sample\\\\src\\\\components\\\\main\\\\CheckList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Checklist = ({\n  email\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n\n  // 체크리스트 불러오기\n  useEffect(() => {\n    axios.get(`/api/checklist/${email}`).then(response => setTasks(response.data)).catch(error => console.error(error));\n  }, [email]);\n\n  // 새로운 작업 추가\n  const addTask = () => {\n    axios.post('/api/checklist/add', {\n      email,\n      text: newTask\n    }).then(response => setTasks([...tasks, response.data])).catch(error => console.error(error));\n    setNewTask(\"\");\n  };\n\n  // 작업 삭제\n  const deleteTask = id => {\n    axios.delete(`/api/checklist/delete/${id}`).then(() => setTasks(tasks.filter(task => task.id !== id))).catch(error => console.error(error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [email, \"'s Checklist\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [task.text, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteTask(task.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newTask,\n      onChange: e => setNewTask(e.target.value),\n      placeholder: \"New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTask,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Checklist, \"MVDLnJyLcavc0PNJLnR8NMYsH5o=\");\n_c = Checklist;\nexport default Checklist;\n\n// import React, { useState, useEffect } from 'react';\n\n// // 초기 체크리스트 데이터를 제공하는 함수\n// function getDefaultChecklist() {\n//   return [\n//     { id: 1, text: \"Reduce water usage by 10%\", completed: false },\n//     { id: 2, text: \"Use public transportation 3 times\", completed: false },\n//     { id: 3, text: \"Unplug unused electronics\", completed: false },\n//   ];\n// }\n\n// function Checklist() {\n//   const [checklist, setChecklist] = useState([]);\n//   const [newItem, setNewItem] = useState(\"\"); // 사용자가 입력하는 할 일 텍스트\n\n//   // 초기 로딩 시, 체크리스트를 가져오고 리셋 타이밍 확인\n//   useEffect(() => {\n//     const savedChecklist = JSON.parse(localStorage.getItem('checklist')) || getDefaultChecklist();\n//     const lastReset = localStorage.getItem('lastReset');\n//     const now = new Date();\n\n//     // 하루가 지났으면 체크리스트 리셋\n//     if (!lastReset || new Date(lastReset).getDate() !== now.getDate()) {\n//       localStorage.setItem('lastReset', now.toISOString()); // 리셋 시간 기록\n//       setChecklist(getDefaultChecklist()); // 기본 체크리스트로 리셋\n//     } else {\n//       setChecklist(savedChecklist); // 저장된 체크리스트 불러오기\n//     }\n//   }, []);\n\n//   // 체크리스트가 업데이트될 때마다 localStorage에 저장\n//   useEffect(() => {\n//     localStorage.setItem('checklist', JSON.stringify(checklist));\n//   }, [checklist]);\n\n//   // 할 일 완료 처리\n//   const completeItem = (id) => {\n//     setChecklist((prevChecklist) =>\n//       prevChecklist.map((item) =>\n//         item.id === id ? { ...item, completed: true } : item\n//       )\n//     );\n//   };\n\n//   // 새로운 할 일 추가\n//   const addItem = () => {\n//     if (newItem.trim() !== \"\") {\n//       setChecklist((prevChecklist) => [\n//         ...prevChecklist,\n//         { id: Date.now(), text: newItem, completed: false },\n//       ]);\n//       setNewItem(\"\"); // 입력 필드 리셋\n//     }\n//   };\n\n//   // 할 일 삭제\n//   const deleteItem = (id) => {\n//     setChecklist((prevChecklist) => prevChecklist.filter((item) => item.id !== id));\n//   };\n\n//   return (\n//     <div className=\"checklist\">\n//       <h2>Today's Checklist</h2>\n//       <div className=\"add-item\">\n//         <input\n//           type=\"text\"\n//           value={newItem}\n//           onChange={(e) => setNewItem(e.target.value)}\n//           placeholder=\"할 일 추가\"\n//         />\n//         <button onClick={addItem}>추가</button> {/* 할 일 추가 버튼 */}\n//       </div>\n//       <ul>\n//         {checklist.map((item) => (\n//           <li key={item.id}>\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 checked={item.completed}\n//                 disabled={item.completed}\n//                 onChange={() => completeItem(item.id)}\n//               />\n//               <span style={{ textDecoration: item.completed ? 'line-through' : 'none' }}>\n//                 {item.text}\n//               </span>\n//             </label>\n//             <button onClick={() => deleteItem(item.id)}>삭제</button> {/* 삭제 버튼 */}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default Checklist;\nvar _c;\n$RefreshReg$(_c, \"Checklist\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Checklist","email","_s","tasks","setTasks","newTask","setNewTask","get","then","response","data","catch","error","console","addTask","post","text","deleteTask","id","delete","filter","task","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/이미림/Desktop/test1/sample/src/components/main/CheckList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Checklist = ({ email }) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [newTask, setNewTask] = useState(\"\");\r\n\r\n  // 체크리스트 불러오기\r\n  useEffect(() => {\r\n    axios.get(`/api/checklist/${email}`)\r\n      .then(response => setTasks(response.data))\r\n      .catch(error => console.error(error));\r\n  }, [email]);\r\n\r\n  // 새로운 작업 추가\r\n  const addTask = () => {\r\n    axios.post('/api/checklist/add', { email, text: newTask })\r\n      .then(response => setTasks([...tasks, response.data]))\r\n      .catch(error => console.error(error));\r\n    setNewTask(\"\");\r\n  };\r\n\r\n  // 작업 삭제\r\n  const deleteTask = (id) => {\r\n    axios.delete(`/api/checklist/delete/${id}`)\r\n      .then(() => setTasks(tasks.filter(task => task.id !== id)))\r\n      .catch(error => console.error(error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{email}'s Checklist</h2>\r\n      <ul>\r\n        {tasks.map(task => (\r\n          <li key={task.id}>\r\n            {task.text}\r\n            <button onClick={() => deleteTask(task.id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <input \r\n        type=\"text\" \r\n        value={newTask} \r\n        onChange={e => setNewTask(e.target.value)} \r\n        placeholder=\"New Task\" \r\n      />\r\n      <button onClick={addTask}>Add Task</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checklist;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// // 초기 체크리스트 데이터를 제공하는 함수\r\n// function getDefaultChecklist() {\r\n//   return [\r\n//     { id: 1, text: \"Reduce water usage by 10%\", completed: false },\r\n//     { id: 2, text: \"Use public transportation 3 times\", completed: false },\r\n//     { id: 3, text: \"Unplug unused electronics\", completed: false },\r\n//   ];\r\n// }\r\n\r\n// function Checklist() {\r\n//   const [checklist, setChecklist] = useState([]);\r\n//   const [newItem, setNewItem] = useState(\"\"); // 사용자가 입력하는 할 일 텍스트\r\n\r\n//   // 초기 로딩 시, 체크리스트를 가져오고 리셋 타이밍 확인\r\n//   useEffect(() => {\r\n//     const savedChecklist = JSON.parse(localStorage.getItem('checklist')) || getDefaultChecklist();\r\n//     const lastReset = localStorage.getItem('lastReset');\r\n//     const now = new Date();\r\n\r\n//     // 하루가 지났으면 체크리스트 리셋\r\n//     if (!lastReset || new Date(lastReset).getDate() !== now.getDate()) {\r\n//       localStorage.setItem('lastReset', now.toISOString()); // 리셋 시간 기록\r\n//       setChecklist(getDefaultChecklist()); // 기본 체크리스트로 리셋\r\n//     } else {\r\n//       setChecklist(savedChecklist); // 저장된 체크리스트 불러오기\r\n//     }\r\n//   }, []);\r\n\r\n//   // 체크리스트가 업데이트될 때마다 localStorage에 저장\r\n//   useEffect(() => {\r\n//     localStorage.setItem('checklist', JSON.stringify(checklist));\r\n//   }, [checklist]);\r\n\r\n//   // 할 일 완료 처리\r\n//   const completeItem = (id) => {\r\n//     setChecklist((prevChecklist) =>\r\n//       prevChecklist.map((item) =>\r\n//         item.id === id ? { ...item, completed: true } : item\r\n//       )\r\n//     );\r\n//   };\r\n\r\n//   // 새로운 할 일 추가\r\n//   const addItem = () => {\r\n//     if (newItem.trim() !== \"\") {\r\n//       setChecklist((prevChecklist) => [\r\n//         ...prevChecklist,\r\n//         { id: Date.now(), text: newItem, completed: false },\r\n//       ]);\r\n//       setNewItem(\"\"); // 입력 필드 리셋\r\n//     }\r\n//   };\r\n\r\n//   // 할 일 삭제\r\n//   const deleteItem = (id) => {\r\n//     setChecklist((prevChecklist) => prevChecklist.filter((item) => item.id !== id));\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"checklist\">\r\n//       <h2>Today's Checklist</h2>\r\n//       <div className=\"add-item\">\r\n//         <input\r\n//           type=\"text\"\r\n//           value={newItem}\r\n//           onChange={(e) => setNewItem(e.target.value)}\r\n//           placeholder=\"할 일 추가\"\r\n//         />\r\n//         <button onClick={addItem}>추가</button> {/* 할 일 추가 버튼 */}\r\n//       </div>\r\n//       <ul>\r\n//         {checklist.map((item) => (\r\n//           <li key={item.id}>\r\n//             <label>\r\n//               <input\r\n//                 type=\"checkbox\"\r\n//                 checked={item.completed}\r\n//                 disabled={item.completed}\r\n//                 onChange={() => completeItem(item.id)}\r\n//               />\r\n//               <span style={{ textDecoration: item.completed ? 'line-through' : 'none' }}>\r\n//                 {item.text}\r\n//               </span>\r\n//             </label>\r\n//             <button onClick={() => deleteItem(item.id)}>삭제</button> {/* 삭제 버튼 */}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Checklist;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}