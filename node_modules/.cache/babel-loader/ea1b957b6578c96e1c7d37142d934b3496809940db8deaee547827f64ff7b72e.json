{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uBBF8\\uB9BC\\\\Desktop\\\\test1\\\\sample\\\\src\\\\components\\\\pages\\\\Calendar.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n// import { jwtDecode } from 'jwt-decode'; // JWT 디코딩을 위한 라이브러리\n// import '../styles/Calendar.css';\n\n// const Calendar = () => {\n//   const navigate = useNavigate();\n//   const [currentDate] = useState(new Date()); // 현재 날짜 관리\n//   const [checkedDates, setCheckedDates] = useState(new Set());\n//   const [email, setEmail] = useState(\"\"); // 이메일 상태 추가\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       try {\n//         const decodedToken = jwtDecode(token); // JWT 디코딩\n//         setEmail(decodedToken.sub); // sub에서 이메일 상태에 저장\n//         console.log(email);\n//       } catch (error) {\n//         console.error('토큰 디코딩 실패:', error);\n//         navigate('/'); // 토큰이 유효하지 않으면 로그인 페이지로 리디렉트\n//         return;\n//       }\n//     } else {\n//       navigate('/'); // 토큰이 없으면 로그인 페이지로 리디렉트\n//       return;\n//     }\n\n//     // 이메일이 설정되면 체크인 날짜를 가져오는 함수 실행\n//     const fetchCheckedDates = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:8080/api/attendance/all/${email}`);\n//         const dates = response.data.map(record => record.date);\n//         setCheckedDates(new Set(dates));\n//       } catch (error) {\n//         console.error('Failed to fetch checked-in dates', error);\n//       }\n//     };\n\n//     if (email) {\n//       fetchCheckedDates(); // email이 설정된 경우에만 fetchCheckedDates 호출\n//     }\n//   }, [email, navigate]);\n\n//   const handleCheckInToday = async () => {\n//     const today = new Date();\n//     const todayStr = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate())).toISOString().split('T')[0];\n\n//     // 현재 날짜가 체크된 날짜에 포함되어 있는지 확인\n//     if (checkedDates.has(todayStr)) {\n//       alert('이미 출석 했습니다.');\n//       return; // 이미 출석한 경우, 함수 종료\n//     }\n\n//     try {\n//       // 체크인 요청 데이터 출력\n//       console.log('Check-in Request:', {\n//         email: email,\n//         date: todayStr\n//       });\n\n//       // 오늘 날짜에 대한 체크인 요청\n//       const response = await axios.post('http://localhost:8080/api/attendance/check-in', {\n//         email: email,\n//         date: todayStr\n//       }, {\n//         headers: { 'Content-Type': 'application/json' }\n//       });\n\n//       // 응답 데이터 출력\n//       console.log('Check-in Response:', response.data);\n\n//       // 체크된 날짜 상태 업데이트\n//       setCheckedDates(prevCheckedDates => new Set(prevCheckedDates).add(todayStr));\n//       alert('출석 완료!');\n//     } catch (error) {\n//       console.error('Failed to save check-in', error);\n//     }\n//   };\n\n//   const renderCalendar = () => {\n//     const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n//     const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\n\n//     const weeks = [];\n//     let days = [];\n\n//     for (let i = 0; i < firstDay; i++) {\n//       days.push(<td key={`empty-${i}`} className=\"empty\"></td>);\n//     }\n\n//     for (let day = 1; day <= daysInMonth; day++) {\n//       const dayStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).toISOString().split('T')[0];\n//       days.push(\n//         <td key={day} className=\"day\">\n//           {day}\n//           {checkedDates.has(dayStr) && (\n//             <div className=\"award-icon\">\n//               <i className=\"fas fa-seedling\"></i>\n//             </div>\n//           )}\n//         </td>\n//       );\n\n//       if ((firstDay + day) % 7 === 0) {\n//         weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\n//         days = [];\n//       }\n//     }\n\n//     if (days.length > 0) {\n//       weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\n//     }\n\n//     return weeks;\n//   };\n\n//   return (\n//     <div className=\"calendar\">\n//     <div className=\"header\">\n//       <span className=\"month-year\">\n//         {currentDate.getFullYear()}년 {currentDate.toLocaleDateString('ko-KR', { month: 'long' })} 출석체크 \n//       </span>\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>일</th>\n//             <th>월</th>\n//             <th>화</th>\n//             <th>수</th>\n//             <th>목</th>\n//             <th>금</th>\n//             <th>토</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {renderCalendar()}\n//         </tbody>\n//       </table>\n//       {/* 출석하기 버튼을 달력 아래로 이동 */}\n//       <div className=\"check-in-container\">\n//       <button className=\"check-in-button\" onClick={handleCheckInToday}>\n//         <i className=\"fas fa-stamp\"></i> 출석하기\n//       </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Calendar;\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode'; // JWT 디코딩을 위한 라이브러리\nimport '../styles/Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = () => {\n  _s();\n  const navigate = useNavigate();\n  const [currentDate] = useState(new Date()); // 현재 날짜 관리\n  const [checkedDates, setCheckedDates] = useState(new Set());\n  const [email, setEmail] = useState(\"\"); // 이메일 상태 추가\n  const [attendanceRecords, setAttendanceRecords] = useState([]); // 출석 기록 상태 추가\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token); // JWT 디코딩\n        setEmail(decodedToken.sub); // sub에서 이메일 상태에 저장\n      } catch (error) {\n        console.error('토큰 디코딩 실패:', error);\n        navigate('/'); // 토큰이 유효하지 않으면 로그인 페이지로 리디렉트\n        return;\n      }\n    } else {\n      navigate('/'); // 토큰이 없으면 로그인 페이지로 리디렉트\n      return;\n    }\n\n    // 이메일이 설정되면 체크인 날짜를 가져오는 함수 실행\n    const fetchCheckedDates = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/attendance/all/${email}`);\n        const dates = response.data.map(record => record.date);\n        setCheckedDates(new Set(dates));\n        setAttendanceRecords(response.data); // 출석 기록을 상태에 저장\n      } catch (error) {\n        console.error('Failed to fetch checked-in dates', error);\n      }\n    };\n    if (email) {\n      fetchCheckedDates(); // email이 설정된 경우에만 fetchCheckedDates 호출\n    }\n  }, [email, navigate]);\n  const handleCheckInToday = async () => {\n    const today = new Date();\n    const todayStr = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate())).toISOString().split('T')[0];\n\n    // 현재 날짜가 체크된 날짜에 포함되어 있는지 확인\n    if (checkedDates.has(todayStr)) {\n      alert('이미 출석 했습니다.');\n      return; // 이미 출석한 경우, 함수 종료\n    }\n    try {\n      // 체크인 요청 데이터 출력\n      console.log('Check-in Request:', {\n        email: email,\n        date: todayStr\n      });\n\n      // 오늘 날짜에 대한 체크인 요청\n      const response = await axios.post('http://localhost:8080/api/attendance/check-in', {\n        email: email,\n        date: todayStr\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // 응답 데이터 출력\n      console.log('Check-in Response:', response.data);\n\n      // 체크된 날짜 상태 업데이트\n      setCheckedDates(prevCheckedDates => new Set(prevCheckedDates).add(todayStr));\n      alert('출석 완료!');\n    } catch (error) {\n      console.error('Failed to save check-in', error);\n    }\n  };\n  const renderCalendar = () => {\n    const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\n    const weeks = [];\n    let days = [];\n    for (let i = 0; i < firstDay; i++) {\n      days.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"empty\"\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this));\n    }\n    for (let day = 1; day <= daysInMonth; day++) {\n      const dayStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).toISOString().split('T')[0];\n      days.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"day\",\n        children: [day, checkedDates.has(dayStr) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"award-icon\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-seedling\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, day, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this));\n      if ((firstDay + day) % 7 === 0) {\n        weeks.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: days\n        }, `week-${weeks.length}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 20\n        }, this));\n        days = [];\n      }\n    }\n    if (days.length > 0) {\n      weeks.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: days\n      }, `week-${weeks.length}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 18\n      }, this));\n    }\n    return weeks;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"month-year\",\n        children: [currentDate.getFullYear(), \"\\uB144 \", currentDate.toLocaleDateString('ko-KR', {\n          month: 'long'\n        }), \" \\uCD9C\\uC11D\\uCCB4\\uD06C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uC77C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uC6D4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uD654\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uC218\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uBAA9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uAE08\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uD1A0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderCalendar()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attendance-records\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uCD9C\\uC11D \\uAE30\\uB85D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: attendanceRecords.map(record => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [record.date, \" - \", record.status]\n        }, record.date, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"check-in-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"check-in-button\",\n        onClick: handleCheckInToday,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stamp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), \" \\uCD9C\\uC11D\\uD558\\uAE30\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"p1xd+lK2m80c2iN6qLmltR8ORLg=\", false, function () {\n  return [useNavigate];\n});\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jwtDecode","jsxDEV","_jsxDEV","Calendar","_s","navigate","currentDate","Date","checkedDates","setCheckedDates","Set","email","setEmail","attendanceRecords","setAttendanceRecords","token","localStorage","getItem","decodedToken","sub","error","console","fetchCheckedDates","response","get","dates","data","map","record","date","handleCheckInToday","today","todayStr","UTC","getFullYear","getMonth","getDate","toISOString","split","has","alert","log","post","headers","prevCheckedDates","add","renderCalendar","daysInMonth","firstDay","getDay","weeks","days","i","push","className","fileName","_jsxFileName","lineNumber","columnNumber","day","dayStr","children","length","toLocaleDateString","month","status","onClick","_c","$RefreshReg$"],"sources":["C:/Users/이미림/Desktop/test1/sample/src/components/pages/Calendar.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import { jwtDecode } from 'jwt-decode'; // JWT 디코딩을 위한 라이브러리\r\n// import '../styles/Calendar.css';\r\n\r\n// const Calendar = () => {\r\n//   const navigate = useNavigate();\r\n//   const [currentDate] = useState(new Date()); // 현재 날짜 관리\r\n//   const [checkedDates, setCheckedDates] = useState(new Set());\r\n//   const [email, setEmail] = useState(\"\"); // 이메일 상태 추가\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       try {\r\n//         const decodedToken = jwtDecode(token); // JWT 디코딩\r\n//         setEmail(decodedToken.sub); // sub에서 이메일 상태에 저장\r\n//         console.log(email);\r\n//       } catch (error) {\r\n//         console.error('토큰 디코딩 실패:', error);\r\n//         navigate('/'); // 토큰이 유효하지 않으면 로그인 페이지로 리디렉트\r\n//         return;\r\n//       }\r\n//     } else {\r\n//       navigate('/'); // 토큰이 없으면 로그인 페이지로 리디렉트\r\n//       return;\r\n//     }\r\n\r\n//     // 이메일이 설정되면 체크인 날짜를 가져오는 함수 실행\r\n//     const fetchCheckedDates = async () => {\r\n//       try {\r\n//         const response = await axios.get(`http://localhost:8080/api/attendance/all/${email}`);\r\n//         const dates = response.data.map(record => record.date);\r\n//         setCheckedDates(new Set(dates));\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch checked-in dates', error);\r\n//       }\r\n//     };\r\n\r\n//     if (email) {\r\n//       fetchCheckedDates(); // email이 설정된 경우에만 fetchCheckedDates 호출\r\n//     }\r\n//   }, [email, navigate]);\r\n  \r\n//   const handleCheckInToday = async () => {\r\n//     const today = new Date();\r\n//     const todayStr = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate())).toISOString().split('T')[0];\r\n  \r\n//     // 현재 날짜가 체크된 날짜에 포함되어 있는지 확인\r\n//     if (checkedDates.has(todayStr)) {\r\n//       alert('이미 출석 했습니다.');\r\n//       return; // 이미 출석한 경우, 함수 종료\r\n//     }\r\n  \r\n//     try {\r\n//       // 체크인 요청 데이터 출력\r\n//       console.log('Check-in Request:', {\r\n//         email: email,\r\n//         date: todayStr\r\n//       });\r\n  \r\n//       // 오늘 날짜에 대한 체크인 요청\r\n//       const response = await axios.post('http://localhost:8080/api/attendance/check-in', {\r\n//         email: email,\r\n//         date: todayStr\r\n//       }, {\r\n//         headers: { 'Content-Type': 'application/json' }\r\n//       });\r\n  \r\n//       // 응답 데이터 출력\r\n//       console.log('Check-in Response:', response.data);\r\n  \r\n//       // 체크된 날짜 상태 업데이트\r\n//       setCheckedDates(prevCheckedDates => new Set(prevCheckedDates).add(todayStr));\r\n//       alert('출석 완료!');\r\n//     } catch (error) {\r\n//       console.error('Failed to save check-in', error);\r\n//     }\r\n//   };\r\n  \r\n  \r\n//   const renderCalendar = () => {\r\n//     const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\r\n//     const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\r\n\r\n//     const weeks = [];\r\n//     let days = [];\r\n\r\n//     for (let i = 0; i < firstDay; i++) {\r\n//       days.push(<td key={`empty-${i}`} className=\"empty\"></td>);\r\n//     }\r\n\r\n//     for (let day = 1; day <= daysInMonth; day++) {\r\n//       const dayStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).toISOString().split('T')[0];\r\n//       days.push(\r\n//         <td key={day} className=\"day\">\r\n//           {day}\r\n//           {checkedDates.has(dayStr) && (\r\n//             <div className=\"award-icon\">\r\n//               <i className=\"fas fa-seedling\"></i>\r\n//             </div>\r\n//           )}\r\n//         </td>\r\n//       );\r\n\r\n//       if ((firstDay + day) % 7 === 0) {\r\n//         weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\r\n//         days = [];\r\n//       }\r\n//     }\r\n\r\n//     if (days.length > 0) {\r\n//       weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\r\n//     }\r\n\r\n//     return weeks;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"calendar\">\r\n//     <div className=\"header\">\r\n//       <span className=\"month-year\">\r\n//         {currentDate.getFullYear()}년 {currentDate.toLocaleDateString('ko-KR', { month: 'long' })} 출석체크 \r\n//       </span>\r\n//       </div>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>일</th>\r\n//             <th>월</th>\r\n//             <th>화</th>\r\n//             <th>수</th>\r\n//             <th>목</th>\r\n//             <th>금</th>\r\n//             <th>토</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {renderCalendar()}\r\n//         </tbody>\r\n//       </table>\r\n//       {/* 출석하기 버튼을 달력 아래로 이동 */}\r\n//       <div className=\"check-in-container\">\r\n//       <button className=\"check-in-button\" onClick={handleCheckInToday}>\r\n//         <i className=\"fas fa-stamp\"></i> 출석하기\r\n//       </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Calendar;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode'; // JWT 디코딩을 위한 라이브러리\r\nimport '../styles/Calendar.css';\r\n\r\nconst Calendar = () => {\r\n  const navigate = useNavigate();\r\n  const [currentDate] = useState(new Date()); // 현재 날짜 관리\r\n  const [checkedDates, setCheckedDates] = useState(new Set());\r\n  const [email, setEmail] = useState(\"\"); // 이메일 상태 추가\r\n  const [attendanceRecords, setAttendanceRecords] = useState([]); // 출석 기록 상태 추가\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        const decodedToken = jwtDecode(token); // JWT 디코딩\r\n        setEmail(decodedToken.sub); // sub에서 이메일 상태에 저장\r\n      } catch (error) {\r\n        console.error('토큰 디코딩 실패:', error);\r\n        navigate('/'); // 토큰이 유효하지 않으면 로그인 페이지로 리디렉트\r\n        return;\r\n      }\r\n    } else {\r\n      navigate('/'); // 토큰이 없으면 로그인 페이지로 리디렉트\r\n      return;\r\n    }\r\n\r\n    // 이메일이 설정되면 체크인 날짜를 가져오는 함수 실행\r\n    const fetchCheckedDates = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/api/attendance/all/${email}`);\r\n        const dates = response.data.map(record => record.date);\r\n        setCheckedDates(new Set(dates));\r\n        setAttendanceRecords(response.data); // 출석 기록을 상태에 저장\r\n      } catch (error) {\r\n        console.error('Failed to fetch checked-in dates', error);\r\n      }\r\n    };\r\n\r\n    if (email) {\r\n      fetchCheckedDates(); // email이 설정된 경우에만 fetchCheckedDates 호출\r\n    }\r\n  }, [email, navigate]);\r\n  \r\n  const handleCheckInToday = async () => {\r\n    const today = new Date();\r\n    const todayStr = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate())).toISOString().split('T')[0];\r\n  \r\n    // 현재 날짜가 체크된 날짜에 포함되어 있는지 확인\r\n    if (checkedDates.has(todayStr)) {\r\n      alert('이미 출석 했습니다.');\r\n      return; // 이미 출석한 경우, 함수 종료\r\n    }\r\n  \r\n    try {\r\n      // 체크인 요청 데이터 출력\r\n      console.log('Check-in Request:', {\r\n        email: email,\r\n        date: todayStr\r\n      });\r\n  \r\n      // 오늘 날짜에 대한 체크인 요청\r\n      const response = await axios.post('http://localhost:8080/api/attendance/check-in', {\r\n        email: email,\r\n        date: todayStr\r\n      }, {\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n  \r\n      // 응답 데이터 출력\r\n      console.log('Check-in Response:', response.data);\r\n  \r\n      // 체크된 날짜 상태 업데이트\r\n      setCheckedDates(prevCheckedDates => new Set(prevCheckedDates).add(todayStr));\r\n      alert('출석 완료!');\r\n    } catch (error) {\r\n      console.error('Failed to save check-in', error);\r\n    }\r\n  };\r\n  \r\n  const renderCalendar = () => {\r\n    const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\r\n    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\r\n\r\n    const weeks = [];\r\n    let days = [];\r\n\r\n    for (let i = 0; i < firstDay; i++) {\r\n      days.push(<td key={`empty-${i}`} className=\"empty\"></td>);\r\n    }\r\n\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      const dayStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).toISOString().split('T')[0];\r\n      days.push(\r\n        <td key={day} className=\"day\">\r\n          {day}\r\n          {checkedDates.has(dayStr) && (\r\n            <div className=\"award-icon\">\r\n              <i className=\"fas fa-seedling\"></i>\r\n            </div>\r\n          )}\r\n        </td>\r\n      );\r\n\r\n      if ((firstDay + day) % 7 === 0) {\r\n        weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\r\n        days = [];\r\n      }\r\n    }\r\n\r\n    if (days.length > 0) {\r\n      weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\r\n    }\r\n\r\n    return weeks;\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <div className=\"header\">\r\n        <span className=\"month-year\">\r\n          {currentDate.getFullYear()}년 {currentDate.toLocaleDateString('ko-KR', { month: 'long' })} 출석체크 \r\n        </span>\r\n      </div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>일</th>\r\n            <th>월</th>\r\n            <th>화</th>\r\n            <th>수</th>\r\n            <th>목</th>\r\n            <th>금</th>\r\n            <th>토</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {renderCalendar()}\r\n        </tbody>\r\n      </table>\r\n      {/* 출석 기록 출력 */}\r\n      <div className=\"attendance-records\">\r\n        <h2>출석 기록</h2>\r\n        <ul>\r\n          {attendanceRecords.map((record) => (\r\n            <li key={record.date}>\r\n              {record.date} - {record.status}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      {/* 출석하기 버튼을 달력 아래로 이동 */}\r\n      <div className=\"check-in-container\">\r\n        <button className=\"check-in-button\" onClick={handleCheckInToday}>\r\n          <i className=\"fas fa-stamp\"></i> 출석하기\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;AACxC,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAIW,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAIc,GAAG,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}