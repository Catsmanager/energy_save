{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uBBF8\\uB9BC\\\\Desktop\\\\test1\\\\sample\\\\src\\\\components\\\\card\\\\ImageUploadCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport '../styles/ImageUploadCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUploadCard = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append('image', file);\n    try {\n      await axios.post('http://localhost:8080/api/ocr', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // 업로드 완료 후 페이지 이동 등을 처리할 수 있음\n      // 예를 들어, 업로드 완료 후 페이지를 리디렉션할 수 있습니다.\n      // navigate('/success');\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-upload-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"image-upload-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload Image for OCR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageUploadCard, \"Nkb8eHkBruGouXteoqeZ1R6wRVk=\");\n_c = ImageUploadCard;\nexport default ImageUploadCard;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import '../styles/ImageUploadCard.css';\n\n// const ImageUploadCard = () => {\n//     const [file, setFile] = useState(null);\n//     const [ocrResult, setOcrResult] = useState(\"\");\n//     const [isTransportVerified, setIsTransportVerified] = useState(false); // 대중교통 확인 상태\n\n//     const handleFileChange = (event) => {\n//         setFile(event.target.files[0]);\n//     };\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n\n//         const formData = new FormData();\n//         formData.append('image', file);\n\n//         try {\n//             const response = await axios.post('http://localhost:8080/api/ocr', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data'\n//                 }\n//             });\n\n//             const ocrText = response.data; // 서버로부터 OCR 결과 받기\n//             setOcrResult(ocrText);\n\n//             // 검색할 단어 목록\n//             const transportKeywords = [\"대 중 교 통\", \"지 하 철\", \"버 스\"];\n\n//             // 단어가 OCR 결과에 포함되어 있는지 확인\n//             const isVerified = transportKeywords.some(keyword => ocrText.includes(keyword));\n\n//             setIsTransportVerified(isVerified);\n\n//         } catch (error) {\n//             console.error('Error uploading file:', error);\n//         }\n//     };\n\n//     return (\n//         <div className=\"image-upload-container\">\n//             <form onSubmit={handleSubmit} className=\"image-upload-card\">\n//                 <h2>Upload Image for OCR</h2>\n//                 <input type=\"file\" onChange={handleFileChange} required />\n//                 <button type=\"submit\">Upload</button>\n//             </form>\n//             <div className=\"ocr-result-container\">\n//                 {ocrResult && (\n//                     <div className=\"ocr-result\">\n//                         <h3>OCR Result:</h3>\n//                         <p>{ocrResult}</p>\n//                     </div>\n//                 )}\n//                 {isTransportVerified && (\n//                     <div className=\"verification-success\">\n//                         <p>대중교통을 사용했습니다</p>\n//                     </div>\n//                 )}\n//                 {!isTransportVerified && ocrResult && (\n//                     <div className=\"verification-failure\">\n//                         <p>대중교통을 사용하지 않았습니다.</p>\n//                     </div>\n//                 )}\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default ImageUploadCard;\nvar _c;\n$RefreshReg$(_c, \"ImageUploadCard\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ImageUploadCard","_s","file","setFile","handleFileChange","event","target","files","handleSubmit","preventDefault","formData","FormData","append","post","headers","error","console","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","required","_c","$RefreshReg$"],"sources":["C:/Users/이미림/Desktop/test1/sample/src/components/card/ImageUploadCard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/ImageUploadCard.css';\r\n\r\nconst ImageUploadCard = () => {\r\n    const [file, setFile] = useState(null);\r\n\r\n    const handleFileChange = (event) => {\r\n        setFile(event.target.files[0]);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = new FormData();\r\n        formData.append('image', file);\r\n\r\n        try {\r\n            await axios.post('http://localhost:8080/api/ocr', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n\r\n            // 업로드 완료 후 페이지 이동 등을 처리할 수 있음\r\n            // 예를 들어, 업로드 완료 후 페이지를 리디렉션할 수 있습니다.\r\n            // navigate('/success');\r\n\r\n        } catch (error) {\r\n            console.error('Error uploading file:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"image-upload-container\">\r\n            <form onSubmit={handleSubmit} className=\"image-upload-card\">\r\n                <h2>Upload Image for OCR</h2>\r\n                <input type=\"file\" onChange={handleFileChange} required />\r\n                <button type=\"submit\">Upload</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUploadCard;\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import '../styles/ImageUploadCard.css';\r\n\r\n// const ImageUploadCard = () => {\r\n//     const [file, setFile] = useState(null);\r\n//     const [ocrResult, setOcrResult] = useState(\"\");\r\n//     const [isTransportVerified, setIsTransportVerified] = useState(false); // 대중교통 확인 상태\r\n\r\n//     const handleFileChange = (event) => {\r\n//         setFile(event.target.files[0]);\r\n//     };\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n\r\n//         const formData = new FormData();\r\n//         formData.append('image', file);\r\n\r\n//         try {\r\n//             const response = await axios.post('http://localhost:8080/api/ocr', formData, {\r\n//                 headers: {\r\n//                     'Content-Type': 'multipart/form-data'\r\n//                 }\r\n//             });\r\n\r\n//             const ocrText = response.data; // 서버로부터 OCR 결과 받기\r\n//             setOcrResult(ocrText);\r\n\r\n//             // 검색할 단어 목록\r\n//             const transportKeywords = [\"대 중 교 통\", \"지 하 철\", \"버 스\"];\r\n\r\n//             // 단어가 OCR 결과에 포함되어 있는지 확인\r\n//             const isVerified = transportKeywords.some(keyword => ocrText.includes(keyword));\r\n\r\n//             setIsTransportVerified(isVerified);\r\n\r\n//         } catch (error) {\r\n//             console.error('Error uploading file:', error);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"image-upload-container\">\r\n//             <form onSubmit={handleSubmit} className=\"image-upload-card\">\r\n//                 <h2>Upload Image for OCR</h2>\r\n//                 <input type=\"file\" onChange={handleFileChange} required />\r\n//                 <button type=\"submit\">Upload</button>\r\n//             </form>\r\n//             <div className=\"ocr-result-container\">\r\n//                 {ocrResult && (\r\n//                     <div className=\"ocr-result\">\r\n//                         <h3>OCR Result:</h3>\r\n//                         <p>{ocrResult}</p>\r\n//                     </div>\r\n//                 )}\r\n//                 {isTransportVerified && (\r\n//                     <div className=\"verification-success\">\r\n//                         <p>대중교통을 사용했습니다</p>\r\n//                     </div>\r\n//                 )}\r\n//                 {!isTransportVerified && ocrResult && (\r\n//                     <div className=\"verification-failure\">\r\n//                         <p>대중교통을 사용하지 않았습니다.</p>\r\n//                     </div>\r\n//                 )}\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ImageUploadCard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMQ,gBAAgB,GAAIC,KAAK,IAAK;IAChCF,OAAO,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAClC,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,KAAK,IAAK;IAClCA,KAAK,CAACI,cAAc,CAAC,CAAC;IAEtB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEV,IAAI,CAAC;IAE9B,IAAI;MACA,MAAML,KAAK,CAACgB,IAAI,CAAC,+BAA+B,EAAEH,QAAQ,EAAE;QACxDI,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;;MAEF;MACA;MACA;IAEJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ,CAAC;EAED,oBACIhB,OAAA;IAAKkB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,eACnCnB,OAAA;MAAMoB,QAAQ,EAAEX,YAAa;MAACS,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBACvDnB,OAAA;QAAAmB,QAAA,EAAI;MAAoB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7BxB,OAAA;QAAOyB,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAErB,gBAAiB;QAACsB,QAAQ;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1DxB,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;AAACtB,EAAA,CAtCID,eAAe;AAAA2B,EAAA,GAAf3B,eAAe;AAwCrB,eAAeA,eAAe;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}