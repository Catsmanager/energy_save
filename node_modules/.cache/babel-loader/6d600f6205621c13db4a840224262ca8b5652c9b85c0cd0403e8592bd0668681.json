{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uBBF8\\uB9BC\\\\Desktop\\\\test1\\\\sample\\\\src\\\\components\\\\pages\\\\Calender.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport '../styles/Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  email\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [checkedDates, setCheckedDates] = useState(new Set());\n  useEffect(() => {\n    if (!email) {\n      navigate('/'); // Redirect to login page if email is not provided\n      return;\n    }\n    const fetchCheckedDates = async () => {\n      try {\n        // Fetch the user's checked-in dates\n        const response = await axios.get(`/api/attendance/all/${email}`);\n        const dates = response.data.map(record => record.date);\n        setCheckedDates(new Set(dates));\n      } catch (error) {\n        console.error('Failed to fetch checked-in dates', error);\n      }\n    };\n    fetchCheckedDates();\n  }, [email, navigate]);\n  const getDaysInMonth = (month, year) => new Date(year, month + 1, 0).getDate();\n  const getFirstDayOfMonth = (month, year) => new Date(year, month, 1).getDay();\n  const handleDayClick = async day => {\n    const today = new Date();\n    const todayYear = today.getFullYear();\n    const todayMonth = today.getMonth();\n    const todayDate = today.getDate();\n    const selectedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n    const selectedYear = selectedDate.getFullYear();\n    const selectedMonth = selectedDate.getMonth();\n    const selectedDay = selectedDate.getDate();\n\n    // Check if the clicked date is today\n    if (todayYear === selectedYear && todayMonth === selectedMonth && todayDate === selectedDay) {\n      const dayStr = selectedDate.toISOString().split('T')[0];\n      if (!checkedDates.has(dayStr)) {\n        try {\n          // Send the check-in data to the server\n          await axios.post('http://localhost:8080/api/attendance/check-in', {\n            emailId: email,\n            date: dayStr,\n            checked: true\n          });\n\n          // Update the checkedDates state\n          setCheckedDates(new Set(checkedDates).add(dayStr));\n        } catch (error) {\n          console.error('Failed to save check-in', error);\n        }\n      } else {\n        alert('You have already checked in today.');\n      }\n    } else {\n      alert('You can only check in today.');\n    }\n  };\n  const renderCalendar = () => {\n    const daysInMonth = getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear());\n    const firstDay = getFirstDayOfMonth(currentDate.getMonth(), currentDate.getFullYear());\n    const weeks = [];\n    let days = [];\n    for (let i = 0; i < firstDay; i++) {\n      days.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"empty\"\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this));\n    }\n    for (let day = 1; day <= daysInMonth; day++) {\n      const dayStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).toISOString().split('T')[0];\n      days.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"day\",\n        onClick: () => handleDayClick(day),\n        children: [day, checkedDates.has(dayStr) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"award-icon\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-seedling\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, day, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this));\n      if ((firstDay + day) % 7 === 0) {\n        weeks.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: days\n        }, `week-${weeks.length}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 20\n        }, this));\n        days = [];\n      }\n    }\n    if (days.length > 0) {\n      weeks.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: days\n      }, `week-${weeks.length}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 18\n      }, this));\n    }\n    return weeks;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"month-year\",\n        children: [currentDate.getFullYear(), \"\\uB144 \", currentDate.toLocaleDateString('ko-KR', {\n          month: 'long'\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1)),\n        children: \"\\uC774\\uC804\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1)),\n        children: \"\\uB2E4\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uC77C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uC6D4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uD654\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uC218\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uBAA9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uAE08\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uD1A0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderCalendar()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"5hoNfvh35p8XZxr6cabd2uTuRqY=\", false, function () {\n  return [useNavigate];\n});\n_c = Calendar;\nexport default Calendar;\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n// import '../styles/Calendar.css';\n\n// const Calendar = ({ email }) => {\n//   const navigate = useNavigate();\n//   const [currentDate, setCurrentDate] = useState(new Date());// 현재 날짜를 저장하는 상태 변수\n//   const [checkedDates, setCheckedDates] = useState(new Set());\n//   const [userEmail, setUserEmail] = useState(''); // 사용자 이메일 저장을 위한 상태\n\n//   useEffect(() => {\n//     // if (!email) {\n//     //   navigate('/');  // email이 없으면 로그인 페이지로 리디렉트\n//     //   return;\n//     // }\n\n//     // 컴포넌트가 마운트될 때 사용자 이메일과 출석 정보를 불러오는 함수\n\n//     const fetchCheckedDates = async () => {\n//       try {\n//         // Fetch the user's checked-in dates\n//         const response = await axios.get(`http://localhost:8080/api/attendance/all/${email}`);\n//         const dates = response.data.map(record => record.date);\n\n//         setCheckedDates(new Set(dates));\n//       } catch (error) {\n//         console.error('Failed to fetch checked-in dates', error);\n//       }\n//     };\n\n//     fetchCheckedDates();\n//   }, [email, navigate]);\n\n//   const getDaysInMonth = (month, year) => new Date(year, month + 1, 0).getDate();\n//   const getFirstDayOfMonth = (month, year) => new Date(year, month, 1).getDay();\n\n//   const handlePrevMonth = () => {\n//     const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1);\n//     setCurrentDate(newDate);\n//   };\n\n//   const handleNextMonth = () => {\n//     const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1);\n//     setCurrentDate(newDate);\n//   };\n\n//   const handleDayClick = async (day) => {\n//     const today = new Date();\n//     const todayYear = today.getFullYear();\n//     const todayMonth = today.getMonth();\n//     const todayDate = today.getDate();\n\n//     const selectedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n//     const selectedYear = selectedDate.getFullYear();\n//     const selectedMonth = selectedDate.getMonth();\n//     const selectedDay = selectedDate.getDate();\n\n//     // 오늘 날짜를 클릭한 경우\n//     if (todayYear === selectedYear && todayMonth === selectedMonth && todayDate === selectedDay) {\n//       const dayStr = selectedDate.toISOString().split('T')[0]; // 선택한 날짜를 'YYYY-MM-DD' 형식으로 변환\n\n//       if (!checkedDates.has(dayStr)) {\n//         try {\n//           console.log('Posting check-in data:', {\n//             emailId: userEmail,\n//             date: dayStr,\n//             checked: true\n//           });\n\n//           // 출석 정보를 데이터베이스에 저장\n//           const response = await axios.post('/api/attendance/check-in', {\n//             emailId: userEmail,\n//             date: dayStr,\n//             checked: true\n//           });\n\n//           console.log('Response from server:', response.data);\n\n//           // 새로운 출석 정보를 추가하여 checkedDates 업데이트\n//           setCheckedDates(new Set(checkedDates).add(dayStr));\n//         } catch (error) {\n//           console.error('출석 기록 저장 실패', error);\n//         }\n//       } else {\n//         alert('출석은 하루에 한 번 가능합니다.');\n//       }\n//     } else {\n//       alert('오늘이 아닙니다.');\n//     }\n//   };\n\n//   const renderCalendar = () => {\n//     const daysInMonth = getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear());\n//     const firstDay = getFirstDayOfMonth(currentDate.getMonth(), currentDate.getFullYear());\n\n//     const weeks = [];\n//     let days = [];\n\n//     for (let i = 0; i < firstDay; i++) {\n//       days.push(<td key={`empty-${i}`} className=\"empty\"></td>);\n//     }\n\n//     for (let day = 1; day <= daysInMonth; day++) {\n//       const dayStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).toISOString().split('T')[0];\n//       days.push(\n//         <td key={day} className=\"day\" onClick={() => handleDayClick(day)}>\n//           {day}\n//           {checkedDates.has(dayStr) && (\n//             <div className=\"award-icon\">\n//               <i className=\"fas fa-seedling\"></i>\n//             </div>\n//           )}\n//         </td>\n//       );\n\n//       if ((firstDay + day) % 7 === 0) {\n//         weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\n//         days = [];\n//       }\n//     }\n\n//     if (days.length > 0) {\n//       weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\n//     }\n\n//     return weeks;\n//   };\n\n//   return (\n//     <div className=\"calendar\">\n//       <div className=\"header\">\n//         <span className=\"month-year\">\n//           {currentDate.getFullYear()}년 {currentDate.toLocaleDateString('ko-KR', { month: 'long' })}\n//         </span>\n//         <button onClick={handleNextMonth}>다음</button>\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>일</th>\n//             <th>월</th>\n//             <th>화</th>\n//             <th>수</th>\n//             <th>목</th>\n//             <th>금</th>\n//             <th>토</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {renderCalendar()}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","Calendar","email","_s","navigate","checkedDates","setCheckedDates","Set","fetchCheckedDates","response","get","dates","data","map","record","date","error","console","getDaysInMonth","month","year","Date","getDate","getFirstDayOfMonth","getDay","handleDayClick","day","today","todayYear","getFullYear","todayMonth","getMonth","todayDate","selectedDate","currentDate","selectedYear","selectedMonth","selectedDay","dayStr","toISOString","split","has","post","emailId","checked","add","alert","renderCalendar","daysInMonth","firstDay","weeks","days","i","push","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","children","length","toLocaleDateString","setCurrentDate","_c","$RefreshReg$"],"sources":["C:/Users/이미림/Desktop/test1/sample/src/components/pages/Calender.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport '../styles/Calendar.css';\r\n\r\nconst Calendar = ({ email }) => {\r\n  const navigate = useNavigate();\r\n  const [checkedDates, setCheckedDates] = useState(new Set());\r\n\r\n  useEffect(() => {\r\n    if (!email) {\r\n      navigate('/');  // Redirect to login page if email is not provided\r\n      return;\r\n    }\r\n\r\n    const fetchCheckedDates = async () => {\r\n      try {\r\n        // Fetch the user's checked-in dates\r\n        const response = await axios.get(`/api/attendance/all/${email}`);\r\n        const dates = response.data.map(record => record.date);\r\n\r\n        setCheckedDates(new Set(dates));\r\n      } catch (error) {\r\n        console.error('Failed to fetch checked-in dates', error);\r\n      }\r\n    };\r\n\r\n    fetchCheckedDates();\r\n  }, [email, navigate]);\r\n\r\n  const getDaysInMonth = (month, year) => new Date(year, month + 1, 0).getDate();\r\n  const getFirstDayOfMonth = (month, year) => new Date(year, month, 1).getDay();\r\n\r\n  const handleDayClick = async (day) => {\r\n    const today = new Date();\r\n    const todayYear = today.getFullYear();\r\n    const todayMonth = today.getMonth();\r\n    const todayDate = today.getDate();\r\n    \r\n    const selectedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\r\n    const selectedYear = selectedDate.getFullYear();\r\n    const selectedMonth = selectedDate.getMonth();\r\n    const selectedDay = selectedDate.getDate();\r\n  \r\n    // Check if the clicked date is today\r\n    if (todayYear === selectedYear && todayMonth === selectedMonth && todayDate === selectedDay) {\r\n      const dayStr = selectedDate.toISOString().split('T')[0];\r\n\r\n      if (!checkedDates.has(dayStr)) {\r\n        try {\r\n          // Send the check-in data to the server\r\n          await axios.post('http://localhost:8080/api/attendance/check-in', {\r\n            emailId: email,\r\n            date: dayStr,\r\n            checked: true\r\n          });\r\n\r\n          // Update the checkedDates state\r\n          setCheckedDates(new Set(checkedDates).add(dayStr));\r\n        } catch (error) {\r\n          console.error('Failed to save check-in', error);\r\n        }\r\n      } else {\r\n        alert('You have already checked in today.');\r\n      }\r\n    } else {\r\n      alert('You can only check in today.');\r\n    }\r\n  };\r\n\r\n  const renderCalendar = () => {\r\n    const daysInMonth = getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear());\r\n    const firstDay = getFirstDayOfMonth(currentDate.getMonth(), currentDate.getFullYear());\r\n\r\n    const weeks = [];\r\n    let days = [];\r\n\r\n    for (let i = 0; i < firstDay; i++) {\r\n      days.push(<td key={`empty-${i}`} className=\"empty\"></td>);\r\n    }\r\n\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      const dayStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).toISOString().split('T')[0];\r\n      days.push(\r\n        <td key={day} className=\"day\" onClick={() => handleDayClick(day)}>\r\n          {day}\r\n          {checkedDates.has(dayStr) && (\r\n            <div className=\"award-icon\">\r\n              <i className=\"fas fa-seedling\"></i>\r\n            </div>\r\n          )}\r\n        </td>\r\n      );\r\n\r\n      if ((firstDay + day) % 7 === 0) {\r\n        weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\r\n        days = [];\r\n      }\r\n    }\r\n\r\n    if (days.length > 0) {\r\n      weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\r\n    }\r\n\r\n    return weeks;\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <div className=\"header\">\r\n        <span className=\"month-year\">\r\n          {currentDate.getFullYear()}년 {currentDate.toLocaleDateString('ko-KR', { month: 'long' })}\r\n        </span>\r\n        <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1))}>이전</button>\r\n        <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1))}>다음</button>\r\n      </div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>일</th>\r\n            <th>월</th>\r\n            <th>화</th>\r\n            <th>수</th>\r\n            <th>목</th>\r\n            <th>금</th>\r\n            <th>토</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {renderCalendar()}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import '../styles/Calendar.css';\r\n\r\n// const Calendar = ({ email }) => {\r\n//   const navigate = useNavigate();\r\n//   const [currentDate, setCurrentDate] = useState(new Date());// 현재 날짜를 저장하는 상태 변수\r\n//   const [checkedDates, setCheckedDates] = useState(new Set());\r\n//   const [userEmail, setUserEmail] = useState(''); // 사용자 이메일 저장을 위한 상태\r\n\r\n//   useEffect(() => {\r\n//     // if (!email) {\r\n//     //   navigate('/');  // email이 없으면 로그인 페이지로 리디렉트\r\n//     //   return;\r\n//     // }\r\n\r\n//     // 컴포넌트가 마운트될 때 사용자 이메일과 출석 정보를 불러오는 함수\r\n  \r\n//     const fetchCheckedDates = async () => {\r\n//       try {\r\n//         // Fetch the user's checked-in dates\r\n//         const response = await axios.get(`http://localhost:8080/api/attendance/all/${email}`);\r\n//         const dates = response.data.map(record => record.date);\r\n\r\n//         setCheckedDates(new Set(dates));\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch checked-in dates', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchCheckedDates();\r\n//   }, [email, navigate]);\r\n\r\n//   const getDaysInMonth = (month, year) => new Date(year, month + 1, 0).getDate();\r\n//   const getFirstDayOfMonth = (month, year) => new Date(year, month, 1).getDay();\r\n\r\n//   const handlePrevMonth = () => {\r\n//     const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1);\r\n//     setCurrentDate(newDate);\r\n//   };\r\n\r\n//   const handleNextMonth = () => {\r\n//     const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1);\r\n//     setCurrentDate(newDate);\r\n//   };\r\n\r\n//   const handleDayClick = async (day) => {\r\n//     const today = new Date();\r\n//     const todayYear = today.getFullYear();\r\n//     const todayMonth = today.getMonth();\r\n//     const todayDate = today.getDate();\r\n    \r\n//     const selectedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\r\n//     const selectedYear = selectedDate.getFullYear();\r\n//     const selectedMonth = selectedDate.getMonth();\r\n//     const selectedDay = selectedDate.getDate();\r\n  \r\n//     // 오늘 날짜를 클릭한 경우\r\n//     if (todayYear === selectedYear && todayMonth === selectedMonth && todayDate === selectedDay) {\r\n//       const dayStr = selectedDate.toISOString().split('T')[0]; // 선택한 날짜를 'YYYY-MM-DD' 형식으로 변환\r\n\r\n//       if (!checkedDates.has(dayStr)) {\r\n//         try {\r\n//           console.log('Posting check-in data:', {\r\n//             emailId: userEmail,\r\n//             date: dayStr,\r\n//             checked: true\r\n//           });\r\n\r\n//           // 출석 정보를 데이터베이스에 저장\r\n//           const response = await axios.post('/api/attendance/check-in', {\r\n//             emailId: userEmail,\r\n//             date: dayStr,\r\n//             checked: true\r\n//           });\r\n\r\n//           console.log('Response from server:', response.data);\r\n\r\n//           // 새로운 출석 정보를 추가하여 checkedDates 업데이트\r\n//           setCheckedDates(new Set(checkedDates).add(dayStr));\r\n//         } catch (error) {\r\n//           console.error('출석 기록 저장 실패', error);\r\n//         }\r\n//       } else {\r\n//         alert('출석은 하루에 한 번 가능합니다.');\r\n//       }\r\n//     } else {\r\n//       alert('오늘이 아닙니다.');\r\n//     }\r\n//   };\r\n\r\n//   const renderCalendar = () => {\r\n//     const daysInMonth = getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear());\r\n//     const firstDay = getFirstDayOfMonth(currentDate.getMonth(), currentDate.getFullYear());\r\n\r\n//     const weeks = [];\r\n//     let days = [];\r\n\r\n//     for (let i = 0; i < firstDay; i++) {\r\n//       days.push(<td key={`empty-${i}`} className=\"empty\"></td>);\r\n//     }\r\n\r\n//     for (let day = 1; day <= daysInMonth; day++) {\r\n//       const dayStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).toISOString().split('T')[0];\r\n//       days.push(\r\n//         <td key={day} className=\"day\" onClick={() => handleDayClick(day)}>\r\n//           {day}\r\n//           {checkedDates.has(dayStr) && (\r\n//             <div className=\"award-icon\">\r\n//               <i className=\"fas fa-seedling\"></i>\r\n//             </div>\r\n//           )}\r\n//         </td>\r\n//       );\r\n\r\n//       if ((firstDay + day) % 7 === 0) {\r\n//         weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\r\n//         days = [];\r\n//       }\r\n//     }\r\n\r\n//     if (days.length > 0) {\r\n//       weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\r\n//     }\r\n\r\n//     return weeks;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"calendar\">\r\n//       <div className=\"header\">\r\n//         <span className=\"month-year\">\r\n//           {currentDate.getFullYear()}년 {currentDate.toLocaleDateString('ko-KR', { month: 'long' })}\r\n//         </span>\r\n//         <button onClick={handleNextMonth}>다음</button>\r\n//       </div>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>일</th>\r\n//             <th>월</th>\r\n//             <th>화</th>\r\n//             <th>수</th>\r\n//             <th>목</th>\r\n//             <th>금</th>\r\n//             <th>토</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {renderCalendar()}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Calendar;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}