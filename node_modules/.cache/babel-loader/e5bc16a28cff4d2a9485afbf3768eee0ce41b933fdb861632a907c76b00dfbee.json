{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n// import '../styles/Calendar.css';\n\n// const Calendar = ({ email }) => {\n//   const navigate = useNavigate();\n//   const [currentDate, setCurrentDate] = useState(new Date());// 현재 날짜를 저장하는 상태 변수\n//   const [checkedDates, setCheckedDates] = useState(new Set());\n//   const [userEmail, setUserEmail] = useState(''); // 사용자 이메일 저장을 위한 상태\n\n//   useEffect(() => {\n//     // if (!email) {\n//     //   navigate('/');  // email이 없으면 로그인 페이지로 리디렉트\n//     //   return;\n//     // }\n\n//     // 컴포넌트가 마운트될 때 사용자 이메일과 출석 정보를 불러오는 함수\n\n//     const fetchCheckedDates = async () => {\n//       try {\n//         // Fetch the user's checked-in dates\n//         const response = await axios.get(`http://localhost:8080/api/attendance/all/${email}`);\n//         const dates = response.data.map(record => record.date);\n\n//         setCheckedDates(new Set(dates));\n//       } catch (error) {\n//         console.error('Failed to fetch checked-in dates', error);\n//       }\n//     };\n\n//     fetchCheckedDates();\n//   }, [email, navigate]);\n\n//   const getDaysInMonth = (month, year) => new Date(year, month + 1, 0).getDate();\n//   const getFirstDayOfMonth = (month, year) => new Date(year, month, 1).getDay();\n\n//   const handlePrevMonth = () => {\n//     const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1);\n//     setCurrentDate(newDate);\n//   };\n\n//   const handleNextMonth = () => {\n//     const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1);\n//     setCurrentDate(newDate);\n//   };\n\n//   const handleDayClick = async (day) => {\n//     const today = new Date();\n//     const todayYear = today.getFullYear();\n//     const todayMonth = today.getMonth();\n//     const todayDate = today.getDate();\n\n//     const selectedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n//     const selectedYear = selectedDate.getFullYear();\n//     const selectedMonth = selectedDate.getMonth();\n//     const selectedDay = selectedDate.getDate();\n\n//     // 오늘 날짜를 클릭한 경우\n//     if (todayYear === selectedYear && todayMonth === selectedMonth && todayDate === selectedDay) {\n//       const dayStr = selectedDate.toISOString().split('T')[0]; // 선택한 날짜를 'YYYY-MM-DD' 형식으로 변환\n\n//       if (!checkedDates.has(dayStr)) {\n//         try {\n//           console.log('Posting check-in data:', {\n//             emailId: userEmail,\n//             date: dayStr,\n//             checked: true\n//           });\n\n//           // 출석 정보를 데이터베이스에 저장\n//           const response = await axios.post('/api/attendance/check-in', {\n//             emailId: userEmail,\n//             date: dayStr,\n//             checked: true\n//           });\n\n//           console.log('Response from server:', response.data);\n\n//           // 새로운 출석 정보를 추가하여 checkedDates 업데이트\n//           setCheckedDates(new Set(checkedDates).add(dayStr));\n//         } catch (error) {\n//           console.error('출석 기록 저장 실패', error);\n//         }\n//       } else {\n//         alert('출석은 하루에 한 번 가능합니다.');\n//       }\n//     } else {\n//       alert('오늘이 아닙니다.');\n//     }\n//   };\n\n//   const renderCalendar = () => {\n//     const daysInMonth = getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear());\n//     const firstDay = getFirstDayOfMonth(currentDate.getMonth(), currentDate.getFullYear());\n\n//     const weeks = [];\n//     let days = [];\n\n//     for (let i = 0; i < firstDay; i++) {\n//       days.push(<td key={`empty-${i}`} className=\"empty\"></td>);\n//     }\n\n//     for (let day = 1; day <= daysInMonth; day++) {\n//       const dayStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).toISOString().split('T')[0];\n//       days.push(\n//         <td key={day} className=\"day\" onClick={() => handleDayClick(day)}>\n//           {day}\n//           {checkedDates.has(dayStr) && (\n//             <div className=\"award-icon\">\n//               <i className=\"fas fa-seedling\"></i>\n//             </div>\n//           )}\n//         </td>\n//       );\n\n//       if ((firstDay + day) % 7 === 0) {\n//         weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\n//         days = [];\n//       }\n//     }\n\n//     if (days.length > 0) {\n//       weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\n//     }\n\n//     return weeks;\n//   };\n\n//   return (\n//     <div className=\"calendar\">\n//       <div className=\"header\">\n//         <span className=\"month-year\">\n//           {currentDate.getFullYear()}년 {currentDate.toLocaleDateString('ko-KR', { month: 'long' })}\n//         </span>\n//         <button onClick={handleNextMonth}>다음</button>\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>일</th>\n//             <th>월</th>\n//             <th>화</th>\n//             <th>수</th>\n//             <th>목</th>\n//             <th>금</th>\n//             <th>토</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {renderCalendar()}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Calendar;","map":{"version":3,"names":[],"sources":["C:/Users/이미림/Desktop/test1/sample/src/components/pages/Calender.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import '../styles/Calendar.css';\r\n\r\n// const Calendar = ({ email }) => {\r\n//   const navigate = useNavigate();\r\n//   const [currentDate, setCurrentDate] = useState(new Date());// 현재 날짜를 저장하는 상태 변수\r\n//   const [checkedDates, setCheckedDates] = useState(new Set());\r\n//   const [userEmail, setUserEmail] = useState(''); // 사용자 이메일 저장을 위한 상태\r\n\r\n//   useEffect(() => {\r\n//     // if (!email) {\r\n//     //   navigate('/');  // email이 없으면 로그인 페이지로 리디렉트\r\n//     //   return;\r\n//     // }\r\n\r\n//     // 컴포넌트가 마운트될 때 사용자 이메일과 출석 정보를 불러오는 함수\r\n  \r\n//     const fetchCheckedDates = async () => {\r\n//       try {\r\n//         // Fetch the user's checked-in dates\r\n//         const response = await axios.get(`http://localhost:8080/api/attendance/all/${email}`);\r\n//         const dates = response.data.map(record => record.date);\r\n\r\n//         setCheckedDates(new Set(dates));\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch checked-in dates', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchCheckedDates();\r\n//   }, [email, navigate]);\r\n\r\n//   const getDaysInMonth = (month, year) => new Date(year, month + 1, 0).getDate();\r\n//   const getFirstDayOfMonth = (month, year) => new Date(year, month, 1).getDay();\r\n\r\n//   const handlePrevMonth = () => {\r\n//     const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1);\r\n//     setCurrentDate(newDate);\r\n//   };\r\n\r\n//   const handleNextMonth = () => {\r\n//     const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1);\r\n//     setCurrentDate(newDate);\r\n//   };\r\n\r\n//   const handleDayClick = async (day) => {\r\n//     const today = new Date();\r\n//     const todayYear = today.getFullYear();\r\n//     const todayMonth = today.getMonth();\r\n//     const todayDate = today.getDate();\r\n    \r\n//     const selectedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\r\n//     const selectedYear = selectedDate.getFullYear();\r\n//     const selectedMonth = selectedDate.getMonth();\r\n//     const selectedDay = selectedDate.getDate();\r\n  \r\n//     // 오늘 날짜를 클릭한 경우\r\n//     if (todayYear === selectedYear && todayMonth === selectedMonth && todayDate === selectedDay) {\r\n//       const dayStr = selectedDate.toISOString().split('T')[0]; // 선택한 날짜를 'YYYY-MM-DD' 형식으로 변환\r\n\r\n//       if (!checkedDates.has(dayStr)) {\r\n//         try {\r\n//           console.log('Posting check-in data:', {\r\n//             emailId: userEmail,\r\n//             date: dayStr,\r\n//             checked: true\r\n//           });\r\n\r\n//           // 출석 정보를 데이터베이스에 저장\r\n//           const response = await axios.post('/api/attendance/check-in', {\r\n//             emailId: userEmail,\r\n//             date: dayStr,\r\n//             checked: true\r\n//           });\r\n\r\n//           console.log('Response from server:', response.data);\r\n\r\n//           // 새로운 출석 정보를 추가하여 checkedDates 업데이트\r\n//           setCheckedDates(new Set(checkedDates).add(dayStr));\r\n//         } catch (error) {\r\n//           console.error('출석 기록 저장 실패', error);\r\n//         }\r\n//       } else {\r\n//         alert('출석은 하루에 한 번 가능합니다.');\r\n//       }\r\n//     } else {\r\n//       alert('오늘이 아닙니다.');\r\n//     }\r\n//   };\r\n\r\n//   const renderCalendar = () => {\r\n//     const daysInMonth = getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear());\r\n//     const firstDay = getFirstDayOfMonth(currentDate.getMonth(), currentDate.getFullYear());\r\n\r\n//     const weeks = [];\r\n//     let days = [];\r\n\r\n//     for (let i = 0; i < firstDay; i++) {\r\n//       days.push(<td key={`empty-${i}`} className=\"empty\"></td>);\r\n//     }\r\n\r\n//     for (let day = 1; day <= daysInMonth; day++) {\r\n//       const dayStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).toISOString().split('T')[0];\r\n//       days.push(\r\n//         <td key={day} className=\"day\" onClick={() => handleDayClick(day)}>\r\n//           {day}\r\n//           {checkedDates.has(dayStr) && (\r\n//             <div className=\"award-icon\">\r\n//               <i className=\"fas fa-seedling\"></i>\r\n//             </div>\r\n//           )}\r\n//         </td>\r\n//       );\r\n\r\n//       if ((firstDay + day) % 7 === 0) {\r\n//         weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\r\n//         days = [];\r\n//       }\r\n//     }\r\n\r\n//     if (days.length > 0) {\r\n//       weeks.push(<tr key={`week-${weeks.length}`}>{days}</tr>);\r\n//     }\r\n\r\n//     return weeks;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"calendar\">\r\n//       <div className=\"header\">\r\n//         <span className=\"month-year\">\r\n//           {currentDate.getFullYear()}년 {currentDate.toLocaleDateString('ko-KR', { month: 'long' })}\r\n//         </span>\r\n//         <button onClick={handleNextMonth}>다음</button>\r\n//       </div>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>일</th>\r\n//             <th>월</th>\r\n//             <th>화</th>\r\n//             <th>수</th>\r\n//             <th>목</th>\r\n//             <th>금</th>\r\n//             <th>토</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {renderCalendar()}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Calendar;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}