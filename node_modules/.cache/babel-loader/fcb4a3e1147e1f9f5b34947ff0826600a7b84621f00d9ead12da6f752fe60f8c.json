{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uBBF8\\uB9BC\\\\Desktop\\\\test1\\\\sample\\\\src\\\\components\\\\main\\\\CheckList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Checklist = ({\n  email\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [tasks, setTasks] = useState([]); // 초기값을 빈 배열로 설정\n  const [newTask, setNewTask] = useState(\"\");\n  const [username, setUsername] = useState(\"\"); // username을 저장할 상태 변수 추가\n\n  useEffect(() => {\n    if (!email) {\n      navigate(); // email이 없으면 로그인 페이지로 리디렉트\n      return;\n    }\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/checklist/user/${email}`, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // 응답이 배열인지 확인하고 배열이 아닌 경우 빈 배열로 처리\n        const taskData = Array.isArray(response.data.tasks) ? response.data.tasks : [];\n        setTasks(taskData);\n\n        // 응답에서 username 추출 및 상태에 저장\n        const fetchedUsername = response.data.username || \"\";\n        setUsername(fetchedUsername);\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n        setTasks([]); // 에러 발생 시에도 빈 배열로 설정\n      }\n    };\n    fetchTasks();\n  }, [email, navigate]);\n\n  // 새로운 작업 추가\n  const addTask = async () => {\n    try {\n      const response = await axios.post('http://localhost:8080/api/checklist/add', {\n        email,\n        text: newTask\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setTasks([response.data, ...tasks]); // 새 작업이 맨 위에 추가되도록 설정\n      setNewTask(\"\");\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n\n  // 작업 삭제\n  const deleteTask = async id => {\n    try {\n      await axios.delete(`http://localhost:8080/api/checklist/delete/${id}`);\n      setTasks(tasks.filter(task => task.id !== id));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  // 작업 완료 상태 변경\n  const toggleTaskCompletion = async (id, completed) => {\n    try {\n      // 클라이언트에서 상태를 즉시 업데이트\n      setTasks(tasks.map(task => task.id === id ? {\n        ...task,\n        completed: !task.completed\n      } : task));\n\n      // 서버에 상태 업데이트 요청\n      await axios.put(`http://localhost:8080/api/checklist/update/${id}`, {\n        completed: !completed\n      });\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Today's Checklist`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newTask,\n      onChange: e => setNewTask(e.target.value),\n      placeholder: \"New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTask,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.length > 0 ? tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          textDecoration: task.completed ? 'line-through' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: task.completed,\n          onChange: () => toggleTaskCompletion(task.id, task.completed)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this), task.text, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteTask(task.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No tasks available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Checklist, \"qVAH/ZOUUWV5vxfZrckhHT/uIGM=\", false, function () {\n  return [useNavigate];\n});\n_c = Checklist;\nexport default Checklist;\nvar _c;\n$RefreshReg$(_c, \"Checklist\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","Checklist","email","_s","navigate","tasks","setTasks","newTask","setNewTask","username","setUsername","fetchTasks","response","get","headers","taskData","Array","isArray","data","fetchedUsername","error","console","addTask","post","text","deleteTask","id","delete","filter","task","toggleTaskCompletion","completed","map","put","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","length","style","textDecoration","checked","_c","$RefreshReg$"],"sources":["C:/Users/이미림/Desktop/test1/sample/src/components/main/CheckList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst Checklist = ({ email }) => {\r\n  const navigate = useNavigate();\r\n  const [tasks, setTasks] = useState([]);  // 초기값을 빈 배열로 설정\r\n  const [newTask, setNewTask] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");  // username을 저장할 상태 변수 추가\r\n\r\n  useEffect(() => {\r\n    if (!email) {\r\n      navigate();  // email이 없으면 로그인 페이지로 리디렉트\r\n      return;\r\n    }\r\n\r\n    const fetchTasks = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/api/checklist/user/${email}`, {\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n\r\n        // 응답이 배열인지 확인하고 배열이 아닌 경우 빈 배열로 처리\r\n        const taskData = Array.isArray(response.data.tasks) ? response.data.tasks : [];\r\n        setTasks(taskData);\r\n\r\n        // 응답에서 username 추출 및 상태에 저장\r\n        const fetchedUsername = response.data.username || \"\";\r\n        setUsername(fetchedUsername);\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching tasks:', error);\r\n        setTasks([]);  // 에러 발생 시에도 빈 배열로 설정\r\n      }\r\n    };\r\n\r\n    fetchTasks();\r\n  }, [email, navigate]);\r\n\r\n  // 새로운 작업 추가\r\n  const addTask = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/checklist/add', \r\n        { email, text: newTask }, \r\n        { headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n      setTasks([response.data, ...tasks]);  // 새 작업이 맨 위에 추가되도록 설정\r\n      setNewTask(\"\");\r\n    } catch (error) {\r\n      console.error('Error adding task:', error);\r\n    }\r\n  };\r\n\r\n  // 작업 삭제\r\n  const deleteTask = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:8080/api/checklist/delete/${id}`);\r\n      setTasks(tasks.filter(task => task.id !== id));\r\n    } catch (error) {\r\n      console.error('Error deleting task:', error);\r\n    }\r\n  };\r\n\r\n  // 작업 완료 상태 변경\r\n  const toggleTaskCompletion = async (id, completed) => {\r\n    try {\r\n      // 클라이언트에서 상태를 즉시 업데이트\r\n      setTasks(tasks.map(task =>\r\n        task.id === id ? { ...task, completed: !task.completed } : task\r\n      ));\r\n\r\n      // 서버에 상태 업데이트 요청\r\n      await axios.put(`http://localhost:8080/api/checklist/update/${id}`, { completed: !completed });\r\n    } catch (error) {\r\n      console.error('Error updating task:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{`Today's Checklist`}</h2>\r\n      \r\n      {/* 새로운 작업 추가 입력 필드와 버튼 */}\r\n      <input \r\n        type=\"text\" \r\n        value={newTask} \r\n        onChange={e => setNewTask(e.target.value)} \r\n        placeholder=\"New Task\" \r\n      />\r\n      <button onClick={addTask}>Add Task</button>\r\n      \r\n      <ul>\r\n        {tasks.length > 0 ? (\r\n          tasks.map(task => (\r\n            <li key={task.id} style={{ textDecoration: task.completed ? 'line-through' : 'none' }}>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={task.completed} \r\n                onChange={() => toggleTaskCompletion(task.id, task.completed)} \r\n              />\r\n              {task.text}\r\n              <button onClick={() => deleteTask(task.id)}>Delete</button>\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <li>No tasks available</li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checklist;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}